## Threads & Connections
httpServer.nioBoss.nThreads=2
httpServer.nioWorker.nThreads=2
httpServerPipelineFactory.executionHandler.enable=true
httpServerPipelineFactory.executionService.nThreads=16
callbackFlusher.nThreads=4
batchRankingPublisherTask.nThreads=1
batchScoreUpdateTask.nThreads=1
enable.questionBatchChannelAndResponse=true
use.precomputedQuestions=true

## System
force.garbagecollection.in.middle.of.synchrotime=true
enable.http.statistics=false

# Hector
#you can pass multiple hosts: host1,host2,...
cassandraRepository.hector.cassandraHosts=localhost
cassandraRepository.hector.cassandraPort=9160
cassandraRepository.hector.autoDiscoverHosts=false
cassandraRepository.hector.autoDiscoveryDelayInSeconds=30    
cassandraRepository.hector.maxActiveConnections=50

# User cache
# Set it to 0 to disable it
cassandraUserRepository.nbUsersToLoadInMemory=300000
# Should we use the faster CF UsersData CF User Cache loading?
cassandraUserRepository.enableUsersDataForCache=true

# which delay do we accept for late answer ?
stateMachine.delayToleranceMs=350

# Once we enter Ranking state, the delay to wait before loading
# all ranking data into memory
# Note: in production, users wait 8000ms before asking for ranking.
# Why a delay?: to let cassandra replicate the data accross all nodes
# To disable the delay it: just set 0
stateMachine.loadAllRankingsFromCassandraToMemoryDelayMs=0

# To save cpu/io, we skip gamestatuspoller task during QT1 once we
# stabilize tq1.
# We call it stable when we load N (3 by default) times in a raw the same value.
stateMachine.tQ1StabilizationReachedWhenStableCounterValueIs=3

# should we verify a user has already logged on another client
enforce.login.uniqueness=true

# should we defer write to channels and do them in batch ?
asyncWriteResponse.enable=false
asyncWriteResponseTask.periodMs=10

batchScoreUpdateTask.periodMs=200
batchScoreUpdateTask.batchSize=400
gameStatusRepositoryPollerTask.periodMs=50

batchRankingPublisherTask.batchSize=1000
batchRankingPublisherTask.periodMs=50

## Consistency Level (ONE, QUORUM, ALL, ANY, EACH_QUORUM, LOCAL_QUORUM)
cassandraRepository.hector.useDefaultConsistencyLevel=false

cassandraRepository.hector.gameStatusReadConsistencyLevel=ONE
cassandraRepository.hector.gameStatusWriteConsistencyLevel=ONE

cassandraRepository.hector.parametersReadConsistencyLevel=ONE
cassandraRepository.hector.parametersWriteConsistencyLevel=ONE

cassandraRepository.hector.questionsReadConsistencyLevel=ONE
cassandraRepository.hector.questionsWriteConsistencyLevel=ONE

cassandraRepository.hector.answersByMailReadConsistencyLevel=ONE
cassandraRepository.hector.answersByMailWriteConsistencyLevel=ONE

cassandraRepository.hector.finalScoresReadConsistencyLevel=ONE
cassandraRepository.hector.finalScoresWriteConsistencyLevel=ONE

cassandraRepository.hector.usersReadConsistencyLevel=ONE
cassandraRepository.hector.usersWriteConsistencyLevel=ONE

cassandraRepository.hector.loginStatusReadConsistencyLevel=ONE
cassandraRepository.hector.loginStatusWriteConsistencyLevel=ONE

##
http.enable.compression=false
http.enable.chunks=false
http.enable.logger=false
http.enable.time.logger=false
http.server.port=9090
http.server.htdocs=htdocs/
http.maximum.request.length=1024
http.maximum.header.size=2048
http.maximum.chunk.size=8192

# Why decoder do you want to use
# default : safe, it does lots of things, many of them are cpu consumming and not needed
# fast : it uses simple java to bypass most of the bottlenecks, simple to understand
# faster : more complex, as it uses a copy of netty code, but is even faster than the previous one
http.decoder=faster

# when bench is enabled no task are launched
# and a specific request handler is used 
# it answer for all requests the output "something" with a dummy cookie
http.enable.bench=false

##
cassandra.host=localhost
cassandra.jmx.port=8080
cassandra.cluster=Test Cluster
cassandra.keyspace=USI_KEYSPACE
cassandra.rankingKeyspace=USI_RANKING

##
# user is usi2011_jaxio / gagner
twitter.api.enabled=false
twitter.api.key=4coD5NN7q8SaOhb5tOxIUQ
twitter.api.secret=dRyst8pzKAc0XZjJ7ThmoDbsgbhEnSxKcg0wM8ybDA
twitter.api.access.token=263438106-g2XeLzOBcaoUcXpbBs7gDIL3O43H9KdtmXvIwx3J
twitter.api.access.secret=sKhHohYkAhA2pEPFST0ArNeSmLRe14DEE0rmamUqY

##
proxy.enabled=true
proxy.host=10.200.1.44
proxy.port=8080
proxy.user=
proxy.password=

#
cookie.salt.size=8
cookie.secret.key=this is sparta !
cookie.encrypt=false
